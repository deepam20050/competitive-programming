<snippet>
  <content><![CDATA[
template < class T > struct Matrix {
  int R, C;
  vector < vector < T > > data;
  Matrix(int r, int c) : R(r), C(c) {
    data.assign(R, vector < T > (C));
  }
  Matrix(vector<vector<T>> dat) : data(dat), R(sz(data)), C(sz(data[0])) {}

  Matrix operator+(const Matrix& M) {
    Matrix res(R, C);
    rep(i, 0, R) {
      rep(j, 0, C) {
        res.data[i][j] = data[i][j] + M.data[i][j];
      }
    }
    return res;
  }
  Matrix operator-(const Matrix& M) {
    Matrix res(R, C);
    rep(i, 0, R) {
      rep(j, 0, C) {
        res.data[i][j] = data[i][j] - M.data[i][j];
      }
    }
    return res;
  }
  Matrix operator*(const Matrix& M) {
    Matrix res(R, M.C);
    rep(i, 0, R) {
      rep(j, 0, C) {
        rep(k, 0, M.C) {
          res.data[i][k] += data[i][j] * M.data[j][k];
        }
      }
    }
    return res;
  }
  Matrix& operator+=(const Matrix& M) {
    return *this = (*this)+M;
  }
  Matrix& operator-=(const Matrix& M) {
    return *this = (*this)-M;
  }
  Matrix& operator*=(const Matrix& M) {
    return *this = (*this)*M;
  }
  friend Matrix exp(Matrix M, lli P) {
    Matrix res(M.R, M.C);
    rep(i, 0, M.R) {
      res.data[i][i] = 1;
    }
    for (; P; P >>= 1ll, M *= M) if (P & 1) res *= M;
    return res;
  }
};
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>tmatrix</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>
